package org.tuomola.project;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.NavigableSet;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;


import it.tdlight.common.Init;
import it.tdlight.common.ResultHandler;
import it.tdlight.common.TelegramClient;
import it.tdlight.common.utils.CantLoadLibrary;
import it.tdlight.jni.TdApi;
import it.tdlight.tdlib.ClientManager;

public class MyTelegramClient {
  private static final int APIKEY = 0; // your api key
  private static final String APIHASH = "<your-api-hash"; // your api hash
  private static final String PHONENUMBER = "<your-phone-number>"; // Your phone number

  private static TelegramClient client = null;
  private static TdApi.AuthorizationState authorizationState = null;

  private static final ConcurrentMap<Long, TdApi.Chat> chats = new ConcurrentHashMap<Long, TdApi.Chat>();
  private static final NavigableSet<OrderedChat> mainChatList = new TreeSet<OrderedChat>();
  private static boolean haveFullMainChatList = false;

  private static final ConcurrentMap<Integer, TdApi.UserFullInfo> usersFullInfo = new ConcurrentHashMap<Integer, TdApi.UserFullInfo>();
  private static final ConcurrentMap<Integer, TdApi.BasicGroupFullInfo> basicGroupsFullInfo = new ConcurrentHashMap<Integer, TdApi.BasicGroupFullInfo>();
  private static final ConcurrentMap<Integer, TdApi.SupergroupFullInfo> supergroupsFullInfo = new ConcurrentHashMap<Integer, TdApi.SupergroupFullInfo>();

  private static final ConcurrentMap<Integer, TdApi.User> users = new ConcurrentHashMap<Integer, TdApi.User>();
  private static final ConcurrentMap<Integer, TdApi.BasicGroup> basicGroups = new ConcurrentHashMap<Integer, TdApi.BasicGroup>();
  private static final ConcurrentMap<Integer, TdApi.Supergroup> supergroups = new ConcurrentHashMap<Integer, TdApi.Supergroup>();
  private static final ConcurrentMap<Integer, TdApi.SecretChat> secretChats = new ConcurrentHashMap<Integer, TdApi.SecretChat>();

  private static boolean hasAuthorised = false;

  private static Long broadcasterChatId = null;

  public MyTelegramClient() {
  }

  public void startClient() throws CantLoadLibrary, InterruptedException {
    // Initialize TDLight native libraries
    Init.start();

    // Create a client
    client = ClientManager.create();

    // Initialize the client
    client.initialize(MyTelegramClient::onUpdate, MyTelegramClient::onUpdateError, MyTelegramClient::onError);

    while (!hasAuthorised) {
      Thread.sleep(1000);
    }

    getMainChatList(1000);

    while(!haveFullMainChatList) {
      Thread.sleep(1000);
    }

    broadcasterChatId = findChat("DWK Broadcaster");
    if(broadcasterChatId == null) {
      throw new RuntimeException("Cannot find broadcaster chat with name 'DWK Broadcaster'");
    }

    System.out.println("FOUND BROADCASTER CHAT " + broadcasterChatId);
  }

  private static Long findChat(String chatName)
  {
    for(var chat : chats.entrySet())
    {
      var thisChat = chat.getValue();
      System.out.println("checking group " + thisChat.title);
      if(chatName.equals(thisChat.title)) {
        System.out.println("match - returning " + chat.getKey());
        return chat.getKey();
      }
    }

    return null;
  }

  private static class DefaultHandler implements ResultHandler {
    @Override
    public void onResult(TdApi.Object object) {
        System.out.println(object.toString());
    }
  }  

  private static DefaultHandler defaultHandler = new DefaultHandler();

  public void sendMessage(String messageText) {
    TdApi.InputMessageContent content = new TdApi.InputMessageText(new TdApi.FormattedText(messageText, null), false, true);
    client.send(new TdApi.SendMessage(broadcasterChatId, 0, 0, null, null, content), defaultHandler);    
  }

  private static void onUpdate(TdApi.Object object) {
    switch (object.getConstructor()) {
      case TdApi.UpdateAuthorizationState.CONSTRUCTOR:
        onAuthorizationStateUpdated(((TdApi.UpdateAuthorizationState) object).authorizationState);
        break;
      case TdApi.UpdateUser.CONSTRUCTOR:
        TdApi.UpdateUser updateUser = (TdApi.UpdateUser) object;
        users.put(updateUser.user.id, updateUser.user);
        break;
      case TdApi.UpdateUserStatus.CONSTRUCTOR: {
        TdApi.UpdateUserStatus updateUserStatus = (TdApi.UpdateUserStatus) object;
        TdApi.User user = users.get(updateUserStatus.userId);
        synchronized (user) {
          user.status = updateUserStatus.status;
        }
        break;
      }
      case TdApi.UpdateBasicGroup.CONSTRUCTOR:
        TdApi.UpdateBasicGroup updateBasicGroup = (TdApi.UpdateBasicGroup) object;
        basicGroups.put(updateBasicGroup.basicGroup.id, updateBasicGroup.basicGroup);
        break;
      case TdApi.UpdateSupergroup.CONSTRUCTOR:
        TdApi.UpdateSupergroup updateSupergroup = (TdApi.UpdateSupergroup) object;
        supergroups.put(updateSupergroup.supergroup.id, updateSupergroup.supergroup);
        break;
      case TdApi.UpdateSecretChat.CONSTRUCTOR:
        TdApi.UpdateSecretChat updateSecretChat = (TdApi.UpdateSecretChat) object;
        secretChats.put(updateSecretChat.secretChat.id, updateSecretChat.secretChat);
        break;

      case TdApi.UpdateNewChat.CONSTRUCTOR: {
        TdApi.UpdateNewChat updateNewChat = (TdApi.UpdateNewChat) object;
        TdApi.Chat chat = updateNewChat.chat;
        synchronized (chat) {
          chats.put(chat.id, chat);

          TdApi.ChatPosition[] positions = chat.positions;
          chat.positions = new TdApi.ChatPosition[0];
          setChatPositions(chat, positions);
        }
        break;
      }
      case TdApi.UpdateChatTitle.CONSTRUCTOR: {
        TdApi.UpdateChatTitle updateChat = (TdApi.UpdateChatTitle) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.title = updateChat.title;
        }
        break;
      }
      case TdApi.UpdateChatPhoto.CONSTRUCTOR: {
        TdApi.UpdateChatPhoto updateChat = (TdApi.UpdateChatPhoto) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.photo = updateChat.photo;
        }
        break;
      }
      case TdApi.UpdateChatLastMessage.CONSTRUCTOR: {
        TdApi.UpdateChatLastMessage updateChat = (TdApi.UpdateChatLastMessage) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.lastMessage = updateChat.lastMessage;
          setChatPositions(chat, updateChat.positions);
        }
        break;
      }
      case TdApi.UpdateChatPosition.CONSTRUCTOR: {
        TdApi.UpdateChatPosition updateChat = (TdApi.UpdateChatPosition) object;
        if (updateChat.position.list.getConstructor() != TdApi.ChatListMain.CONSTRUCTOR) {
          break;
        }

        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          int i;
          for (i = 0; i < chat.positions.length; i++) {
            if (chat.positions[i].list.getConstructor() == TdApi.ChatListMain.CONSTRUCTOR) {
              break;
            }
          }
          TdApi.ChatPosition[] new_positions = new TdApi.ChatPosition[chat.positions.length
              + (updateChat.position.order == 0 ? 0 : 1) - (i < chat.positions.length ? 1 : 0)];
          int pos = 0;
          if (updateChat.position.order != 0) {
            new_positions[pos++] = updateChat.position;
          }
          for (int j = 0; j < chat.positions.length; j++) {
            if (j != i) {
              new_positions[pos++] = chat.positions[j];
            }
          }
          assert pos == new_positions.length;

          setChatPositions(chat, new_positions);
        }
        break;
      }
      case TdApi.UpdateChatReadInbox.CONSTRUCTOR: {
        TdApi.UpdateChatReadInbox updateChat = (TdApi.UpdateChatReadInbox) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.lastReadInboxMessageId = updateChat.lastReadInboxMessageId;
          chat.unreadCount = updateChat.unreadCount;
        }
        break;
      }
      case TdApi.UpdateChatReadOutbox.CONSTRUCTOR: {
        TdApi.UpdateChatReadOutbox updateChat = (TdApi.UpdateChatReadOutbox) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.lastReadOutboxMessageId = updateChat.lastReadOutboxMessageId;
        }
        break;
      }
      case TdApi.UpdateChatUnreadMentionCount.CONSTRUCTOR: {
        TdApi.UpdateChatUnreadMentionCount updateChat = (TdApi.UpdateChatUnreadMentionCount) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.unreadMentionCount = updateChat.unreadMentionCount;
        }
        break;
      }
      case TdApi.UpdateMessageMentionRead.CONSTRUCTOR: {
        TdApi.UpdateMessageMentionRead updateChat = (TdApi.UpdateMessageMentionRead) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.unreadMentionCount = updateChat.unreadMentionCount;
        }
        break;
      }
      case TdApi.UpdateChatReplyMarkup.CONSTRUCTOR: {
        TdApi.UpdateChatReplyMarkup updateChat = (TdApi.UpdateChatReplyMarkup) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.replyMarkupMessageId = updateChat.replyMarkupMessageId;
        }
        break;
      }
      case TdApi.UpdateChatDraftMessage.CONSTRUCTOR: {
        TdApi.UpdateChatDraftMessage updateChat = (TdApi.UpdateChatDraftMessage) object;
        TdApi.Chat chat = chats.get(updateChat.chatId);
        synchronized (chat) {
          chat.draftMessage = updateChat.draftMessage;
          setChatPositions(chat, updateChat.positions);
        }
        break;
      }
      case TdApi.UpdateChatPermissions.CONSTRUCTOR: {
        TdApi.UpdateChatPermissions update = (TdApi.UpdateChatPermissions) object;
        TdApi.Chat chat = chats.get(update.chatId);
        synchronized (chat) {
          chat.permissions = update.permissions;
        }
        break;
      }
      case TdApi.UpdateChatNotificationSettings.CONSTRUCTOR: {
        TdApi.UpdateChatNotificationSettings update = (TdApi.UpdateChatNotificationSettings) object;
        TdApi.Chat chat = chats.get(update.chatId);
        synchronized (chat) {
          chat.notificationSettings = update.notificationSettings;
        }
        break;
      }
      case TdApi.UpdateChatDefaultDisableNotification.CONSTRUCTOR: {
        TdApi.UpdateChatDefaultDisableNotification update = (TdApi.UpdateChatDefaultDisableNotification) object;
        TdApi.Chat chat = chats.get(update.chatId);
        synchronized (chat) {
          chat.defaultDisableNotification = update.defaultDisableNotification;
        }
        break;
      }
      case TdApi.UpdateChatIsMarkedAsUnread.CONSTRUCTOR: {
        TdApi.UpdateChatIsMarkedAsUnread update = (TdApi.UpdateChatIsMarkedAsUnread) object;
        TdApi.Chat chat = chats.get(update.chatId);
        synchronized (chat) {
          chat.isMarkedAsUnread = update.isMarkedAsUnread;
        }
        break;
      }
      case TdApi.UpdateChatIsBlocked.CONSTRUCTOR: {
        TdApi.UpdateChatIsBlocked update = (TdApi.UpdateChatIsBlocked) object;
        TdApi.Chat chat = chats.get(update.chatId);
        synchronized (chat) {
          chat.isBlocked = update.isBlocked;
        }
        break;
      }
      case TdApi.UpdateChatHasScheduledMessages.CONSTRUCTOR: {
        TdApi.UpdateChatHasScheduledMessages update = (TdApi.UpdateChatHasScheduledMessages) object;
        TdApi.Chat chat = chats.get(update.chatId);
        synchronized (chat) {
          chat.hasScheduledMessages = update.hasScheduledMessages;
        }
        break;
      }

      case TdApi.UpdateUserFullInfo.CONSTRUCTOR:
        TdApi.UpdateUserFullInfo updateUserFullInfo = (TdApi.UpdateUserFullInfo) object;
        usersFullInfo.put(updateUserFullInfo.userId, updateUserFullInfo.userFullInfo);
        break;
      case TdApi.UpdateBasicGroupFullInfo.CONSTRUCTOR:
        TdApi.UpdateBasicGroupFullInfo updateBasicGroupFullInfo = (TdApi.UpdateBasicGroupFullInfo) object;
        basicGroupsFullInfo.put(updateBasicGroupFullInfo.basicGroupId, updateBasicGroupFullInfo.basicGroupFullInfo);
        break;
      case TdApi.UpdateSupergroupFullInfo.CONSTRUCTOR:
        TdApi.UpdateSupergroupFullInfo updateSupergroupFullInfo = (TdApi.UpdateSupergroupFullInfo) object;
        supergroupsFullInfo.put(updateSupergroupFullInfo.supergroupId, updateSupergroupFullInfo.supergroupFullInfo);
        break;
      default:
        System.out.println("Unsupported update:" + object);

    }
  }

  private static void onUpdateError(Throwable exception) {
    System.out.println("Received an error from updates:");
    exception.printStackTrace();
  }

  private static void onError(Throwable exception) {
    System.out.println("Received an error:");
    exception.printStackTrace();
  }

  private static void onAuthorizationStateUpdated(TdApi.AuthorizationState authorizationState) {
    if (authorizationState != null) {
      MyTelegramClient.authorizationState = authorizationState;
    }
    switch (authorizationState.getConstructor()) {
      case TdApi.AuthorizationStateWaitTdlibParameters.CONSTRUCTOR:
        TdApi.TdlibParameters parameters = new TdApi.TdlibParameters();
        parameters.databaseDirectory = "tdlib";
        parameters.useMessageDatabase = true;
        parameters.useSecretChats = true;
        parameters.apiId = 4082484;
        parameters.apiHash = "6c731364978a5a0e2eeb0351aea6226d";
        parameters.systemLanguageCode = "en";
        parameters.deviceModel = "Desktop";
        parameters.applicationVersion = "1.0";
        parameters.enableStorageOptimizer = true;

        client.send(new TdApi.SetTdlibParameters(parameters), new AuthorizationRequestHandler());
        break;
      case TdApi.AuthorizationStateWaitEncryptionKey.CONSTRUCTOR:
        client.send(new TdApi.CheckDatabaseEncryptionKey(), new AuthorizationRequestHandler());
        break;
      case TdApi.AuthorizationStateWaitPhoneNumber.CONSTRUCTOR: {
        String phoneNumber = "+358449650062";
        client.send(new TdApi.SetAuthenticationPhoneNumber(phoneNumber, null), new AuthorizationRequestHandler());
        break;
      }
      case TdApi.AuthorizationStateWaitOtherDeviceConfirmation.CONSTRUCTOR: {
        String link = ((TdApi.AuthorizationStateWaitOtherDeviceConfirmation) authorizationState).link;
        System.out.println("Please confirm this login link on another device: " + link);
        break;
      }
      case TdApi.AuthorizationStateWaitCode.CONSTRUCTOR: {
        String code = promptString("Please enter authentication code: ");
        client.send(new TdApi.CheckAuthenticationCode(code), new AuthorizationRequestHandler());
        break;
      }
      case TdApi.AuthorizationStateWaitRegistration.CONSTRUCTOR: {
        String firstName = promptString("Please enter your first name: ");
        String lastName = promptString("Please enter your last name: ");
        client.send(new TdApi.RegisterUser(firstName, lastName), new AuthorizationRequestHandler());
        break;
      }
      case TdApi.AuthorizationStateWaitPassword.CONSTRUCTOR: {
        String password = promptString("Please enter password: ");
        client.send(new TdApi.CheckAuthenticationPassword(password), new AuthorizationRequestHandler());
        break;
      }
      case TdApi.AuthorizationStateReady.CONSTRUCTOR:
        hasAuthorised = true;
        // gotAuthorization.signal();
        break;
      case TdApi.AuthorizationStateLoggingOut.CONSTRUCTOR:
        hasAuthorised = false;
        System.out.println("Logging out");
        break;
      case TdApi.AuthorizationStateClosing.CONSTRUCTOR:
        hasAuthorised = false;
        System.out.println("Closing");
        break;
      case TdApi.AuthorizationStateClosed.CONSTRUCTOR:
        System.out.println("Closed");
        break;
      default:
        System.err.println("Unsupported authorization state:" + authorizationState);
    }
  }

  private static class AuthorizationRequestHandler implements ResultHandler {
    @Override
    public void onResult(TdApi.Object object) {
      switch (object.getConstructor()) {
        case TdApi.Error.CONSTRUCTOR:
          System.err.println("Receive an error:" + object);
          onAuthorizationStateUpdated(null); // repeat last action
          break;
        case TdApi.Ok.CONSTRUCTOR:
          // result is already received through UpdateAuthorizationState, nothing to do
          break;
        default:
          System.err.println("Receive wrong response from TDLib:" + object);
      }
    }
  }

  private static String promptString(String prompt) {
    System.out.print(prompt);
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    String str = "";
    try {
      str = reader.readLine();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return str;
  }

  private static void getMainChatList(final int limit) {
    synchronized (mainChatList) {
      if (!haveFullMainChatList && limit > mainChatList.size()) {
        // send GetChats request if there are some unknown chats and have not enough
        // known chats
        long offsetOrder = Long.MAX_VALUE;
        long offsetChatId = 0;
        if (!mainChatList.isEmpty()) {
          OrderedChat last = mainChatList.last();
          offsetOrder = last.position.order;
          offsetChatId = last.chatId;
        }
        client.send(
            new TdApi.GetChats(new TdApi.ChatListMain(), offsetOrder, offsetChatId, limit - mainChatList.size()),
            new ResultHandler() {
              @Override
              public void onResult(TdApi.Object object) {
                switch (object.getConstructor()) {
                  case TdApi.Error.CONSTRUCTOR:
                    System.err.println("Receive an error for GetChats:" + object);
                    break;
                  case TdApi.Chats.CONSTRUCTOR:
                    long[] chatIds = ((TdApi.Chats) object).chatIds;
                    if (chatIds.length == 0) {
                      synchronized (mainChatList) {
                        haveFullMainChatList = true;
                      }
                    }
                    // chats had already been received through updates, let's retry request
                    getMainChatList(limit);
                    break;
                  default:
                    System.err.println("Receive wrong response from TDLib:" + object);
                }
              }
            });
        return;
      }
      java.util.Iterator<OrderedChat> iter = mainChatList.iterator();
      System.out.println();
      System.out.println("First " + limit + " chat(s) out of " + mainChatList.size() + " known chat(s):");
      for (int i = 0; i < limit && i < mainChatList.size(); i++) {
        long chatId = iter.next().chatId;
        TdApi.Chat chat = chats.get(chatId);
        synchronized (chat) {
          System.out.println(chatId + ": " + chat.title);
        }
      }
      System.out.println();
    }
  }

  private static class OrderedChat implements Comparable<OrderedChat> {
    final long chatId;
    final TdApi.ChatPosition position;

    OrderedChat(long chatId, TdApi.ChatPosition position) {
      this.chatId = chatId;
      this.position = position;
    }

    @Override
    public int compareTo(OrderedChat o) {
      if (this.position.order != o.position.order) {
        return o.position.order < this.position.order ? -1 : 1;
      }
      if (this.chatId != o.chatId) {
        return o.chatId < this.chatId ? -1 : 1;
      }
      return 0;
    }

    @Override
    public boolean equals(Object obj) {
      OrderedChat o = (OrderedChat) obj;
      return this.chatId == o.chatId && this.position.order == o.position.order;
    }
  }

  private static void setChatPositions(TdApi.Chat chat, TdApi.ChatPosition[] positions) {
    synchronized (mainChatList) {
      synchronized (chat) {
        for (TdApi.ChatPosition position : chat.positions) {
          if (position.list.getConstructor() == TdApi.ChatListMain.CONSTRUCTOR) {
            boolean isRemoved = mainChatList.remove(new OrderedChat(chat.id, position));
            assert isRemoved;
          }
        }

        chat.positions = positions;

        for (TdApi.ChatPosition position : chat.positions) {
          if (position.list.getConstructor() == TdApi.ChatListMain.CONSTRUCTOR) {
            boolean isAdded = mainChatList.add(new OrderedChat(chat.id, position));
            assert isAdded;
          }
        }
      }
    }
  }

}